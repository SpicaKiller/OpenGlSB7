#include "sb7.h"
#include "Shader.h"
#include <math.h>
class my_application : public sb7::application
{
	void startup()
	{
		shader = new Shader("vertexShader.vert.txt", "tcsShader.tesc.txt", "tesShader.tese.txt", "fragShader.frag.txt");

		//创建数组对象
		glCreateVertexArrays(2, vertex_arrays_object);
		//绑定array对象到OpenGL上下文，让OpenGL知道这些数据
		glBindVertexArray(vertex_arrays_object[0]);
		glBindVertexArray(vertex_arrays_object[1]);
	}

	void render(double currentTime)
	{
		const GLfloat color[] = {
			 0.0f + 0.0f,
			 0.0f + 0.0f, 0.0f, 1.0f
		};
		glClearBufferfv(GL_COLOR, 0, color);

		shader->use();

		GLfloat attrib[]{
			0.0f,
			0.0f, 0.0, 0.0f
		};

		GLfloat triangleColor[] = {
			 1.0f,
			 1.0f, 1.0f, 1.0f
		};

		glVertexAttrib4fv(0, attrib);
		glVertexAttrib4fv(1, triangleColor);

		//贴片的控制单数量设置
		glPatchParameteri(GL_PATCH_VERTICES, 3);
		//仅绘制三角形的轮廓
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

		glDrawArrays(GL_PATCHES, 0, 3);
	}

	void shutdown()
	{

	}

private:
	Shader* shader;
	//顶点数组对象
	GLuint vertex_arrays_object[2];
};

DECLARE_MAIN(my_application);

