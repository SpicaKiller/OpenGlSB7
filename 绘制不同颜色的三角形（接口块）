#include<sb7.h>
#include <math.h>

GLuint compile_shaders(void) {
    GLuint vertex_shader, fragment_shader, program;

    static const char* vertex_shader_source[] = {
        "#version 450 core                                \n"
        "layout(location = 0) in vec4 offset;         \n"
        "layout(location = 1) in vec4 color;         \n"
        "out VS_OUT                          \n"
         " {                       \n"
         "  vec4 color;                      \n"
          " }vs_out;                      \n"

        "void main(void)                             \n"
        "{                                           \n"
        "const vec4 vertices[3] = vec4[3](vec4(0.25, -0.25, 0.5, 1.0),\n"
        "                                vec4(-0.25, -0.25, 0.5, 1.0),\n"
        "                                vec4(0.25, 0.25, 0.5, 1.0)); \n"
        "vs_out.color = color;                         \n"
        "gl_Position = vertices[gl_VertexID] + offset;                \n"

        "}                                          \n"
    };

    static const char* fragment_shader_source[] = {
        "#version 450                               \n"
        "in VS_OUT                            \n"
        "{                             \n"
        "vec4 color;                            \n"
        "}fs_in;                             \n"
        "out vec4 color;"
        "void main(void)                            \n"
        "{                                          \n"
        "     color = fs_in.color;     \n"
        "}                                          \n"
    };

    vertex_shader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertex_shader, 1, vertex_shader_source, NULL);
    glCompileShader(vertex_shader);

    fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragment_shader, 1, fragment_shader_source, NULL);
    glCompileShader(fragment_shader);

    program = glCreateProgram();

    glAttachShader(program, vertex_shader);
    glAttachShader(program, fragment_shader);
    glLinkProgram(program);

    glDeleteShader(vertex_shader);
    glDeleteShader(fragment_shader);

    return program;
}


class my_application :public sb7::application
{
public:

    void startup() {
        rendering_program = compile_shaders();
        glCreateVertexArrays(1, &vertex_array_object);
        glBindVertexArray(vertex_array_object);
    }

    void shutdown() {
        glDeleteVertexArrays(1, &vertex_array_object);
        glDeleteProgram(rendering_program);
        glDeleteVertexArrays(1, &vertex_array_object);
    }

    void render(double currentTime)
    {
        GLfloat color[] = {(float)sin(currentTime) * 0.5f + 0.5f,
                                 (float)cos(currentTime) * 0.5f + 0.5f,
                                0.0f, 1.0f};
        glClearBufferfv(GL_COLOR, 0, color);
        glUseProgram(rendering_program);
        GLfloat attrib[] = { (float)sin(currentTime) * 0.6f,
                            (float)cos(currentTime) * 0.6f,
                               0.0f, 0.0f };
        GLfloat triangleColor[] = {
                              (float)sin(currentTime) * 0.2f + 0.5f,
                              (float)cos(currentTime) * 0.2f + 0.5f, 0.0f,1.0f
        };
        glVertexAttrib4fv(0, attrib);
        glVertexAttrib4fv(1, triangleColor);
        glDrawArrays(GL_TRIANGLES, 0, 3);
    }

private:
    GLuint rendering_program;
    GLuint vertex_array_object;
};
DECLARE_MAIN(my_application);

